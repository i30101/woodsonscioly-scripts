{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nmotor MotorGroup1MotorA = motor(PORT1, false);\nmotor MotorGroup1MotorB = motor(PORT12, true);\nmotor_group MotorGroup1 = motor_group(MotorGroup1MotorA, MotorGroup1MotorB);\n\nmotor MotorGroup7MotorA = motor(PORT7, true);\nmotor MotorGroup7MotorB = motor(PORT6, false);\nmotor_group MotorGroup7 = motor_group(MotorGroup7MotorA, MotorGroup7MotorB);\n\ngyro Gyro5 = gyro(PORT5);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/* ---------------- CONSTANTS ---------------- */\ndouble RPM = 0;\ndouble turnRPM = 15;\nint targetDirection = 0;\ndouble turnTime = 0;\ndouble timeToTurn = 4;\nbool GYRO_ENABLED = true;\n\n\n/* ---------------- AUXILIARY METHODS ---------------- */\nvoid printReading() {\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"rotation: %f\", Gyro5.rotation());\n}\n\nvoid setSpeed(double v) {\n  MotorGroup1MotorA.setVelocity(v, rpm);\n  MotorGroup1MotorB.setVelocity(v, rpm);\n  MotorGroup7MotorA.setVelocity(v, rpm);\n  MotorGroup7MotorB.setVelocity(v, rpm);\n}\n\nvoid turnRightTo();\nvoid turnLeftTo();\n\nvoid turnRightTo() {\n  setSpeed(turnRPM);\n  if (GYRO_ENABLED) {\n    while (fabs(targetDirection - Gyro5.rotation()) > 0.5) {\n      MotorGroup1MotorA.spin(forward);\n      MotorGroup1MotorB.spin(reverse);\n      MotorGroup7MotorA.spin(reverse);\n      MotorGroup7MotorB.spin(forward);\n      wait(1, msec);\n      if (Gyro5.rotation() < targetDirection - 5) {\n        turnLeftTo();\n        break;\n      }\n    }\n  } else {\n    MotorGroup1MotorA.spin(forward);\n    MotorGroup1MotorB.spin(reverse);\n    MotorGroup7MotorA.spin(reverse);\n    MotorGroup7MotorB.spin(forward);\n    wait(3400, msec);\n  }\n  MotorGroup1.stop();\n  MotorGroup7.stop();\n  setSpeed(RPM);\n  wait(500, msec);\n}\n\nvoid turnLeftTo() {\n  setSpeed(turnRPM);\n  if (GYRO_ENABLED) {\n    while (fabs(targetDirection - Gyro5.rotation()) > 0.5) { \n      MotorGroup1MotorA.spin(reverse);\n      MotorGroup1MotorB.spin(forward);\n      MotorGroup7MotorA.spin(forward);\n      MotorGroup7MotorB.spin(reverse);\n      wait(1, msec);\n      if (Gyro5.rotation() > targetDirection + 5) {\n        turnRightTo();\n        break;\n      }\n    }\n  } else {\n    MotorGroup1MotorA.spin(reverse);\n    MotorGroup1MotorB.spin(forward);\n    MotorGroup7MotorA.spin(forward);\n    MotorGroup7MotorB.spin(reverse);\n    wait(timeToTurn, seconds);\n  }\n  MotorGroup1.stop();\n  MotorGroup7.stop();\n  setSpeed(RPM);\n  wait(500, msec);\n}\n\n\n\n/* ---------------- MOVEMENT CONTROL ---------------- */\nstruct Movement {int movement; double units; };\nMovement movements[100] = {};\nint currentIndex = 0;\ndouble totalDistance = 0;\n\nvoid addMovement(int movement, double units, double dist) {\n  movements[currentIndex] = {movement, units};\n  currentIndex++;\n  if (movement == 4 || movement == 5) {\n    turnTime += (units * timeToTurn);\n  }\n  totalDistance += dist;\n}\n\nvoid goForward(double spaces) { addMovement(0, spaces, 50.0 * spaces); }\nvoid goBack(double spaces) { addMovement(1, spaces, 50.0 * spaces); }\nvoid goRight(double spaces) { addMovement(2, spaces, 50.0 * spaces); }\nvoid goLeft(double spaces) { addMovement(3, spaces, 50.0 * spaces); }\nvoid turnRight(int times) { addMovement(4, times, 0); }\nvoid turnLeft(int times) { addMovement(5, times, 0); }\n\nvoid run(double targetTime) {\n  double travelTime = targetTime - turnTime;\n  double rotations = totalDistance / 19.0;\n  RPM = (rotations / travelTime) * 60.0;\n\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"total distance: %f\", totalDistance);\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"RPM: %f\", RPM);\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"turnTime: %f\", turnTime);\n\n  setSpeed(RPM);\n  for (auto &m : movements) {\n    switch (m.movement) {\n      case 0:\n        MotorGroup7.spinFor(forward, m.units * 2.6, turns);\n        break;\n      case 1:\n        MotorGroup7.spinFor(reverse, m.units * 2.6, turns);\n        break;\n      case 2: \n        MotorGroup1.spinFor(forward, m.units * 2.6, turns);\n        break;\n      case 3:\n        MotorGroup1.spinFor(reverse, m.units * 2.6, turns);\n        break;\n      case 4:\n        targetDirection -= (90 * m.units);\n        turnRightTo();\n        break;\n      case 5:\n        targetDirection += (90 * m.units);\n        turnLeftTo();\n        break;\n      default:\n        Brain.Screen.clearScreen();\n        Brain.Screen.print(\"error\");\n        break;\n    }\n  }\n}\n\n\n\nint main() {\n  Brain.Screen.print(\"Calibrating!\");\n  Gyro5.calibrate(calNormal);\n\n  goForward(3.76);\n  goBack(1);\n  turnRight(1);\n  goForward(1);\n  turnRight(1);\n  goForward(2);\n  goBack(2);\n  goRight(1);\n  goForward(1);\n  goRight(1);\n  goForward(1);\n  turnRight(1);\n  goForward(0.6);\n  goBack(0.6);\n  turnRight(1);\n  goForward(1);\n  goLeft(1);\n  goForward(2);\n  goBack(1);\n  turnRight(1);\n  goForward(0.6);\n  \n  /* ---------------- MUST REVIEW BEFORE RUNNING! ---------------- */\n  GYRO_ENABLED = true;\n  run(67);\n}","textLanguage":"cpp","rconfig":[{"port":[1,12],"name":"MotorGroup1","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[7,6],"name":"MotorGroup7","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[5],"name":"Gyro5","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}